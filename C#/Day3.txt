using System;
﻿
﻿namespace Delegates
{
    //step1 : create a delegate class that matches the signature of the func to call
    public delegate void Del1();
    public delegate int DelAdd(int a, int b);
    internal class Program
    {
        static void Display()
        {
            Console.WriteLine("Display Called");
        }
        static void Show()
        {
            Console.WriteLine("Show Called");
        }

        static int Add(int a, int b)
        {
            return a + b;
        }

        static int Substract(int a, int b)
        {
            return a - b;
        }

        static int Multi(int a, int b)
        {
            return a * b;
        }

        static int Divide(int a, int b)
        {
            return a / b;
        }

	public enum Days{
            Monday = 1,
            Tuesday = 2,
            Wednesday = 3,
            Thursday,
            Friday,
            Saturday,
            Sunday
        }

        static void Main1()
        {
            //step 2 : create an object of the delegate class and pass it the function name as a parameter
            Del1 objDel = new Del1(Display);
            //objDel is the delegate reference
            objDel += Show;
            //step 3: call the function via the delegate reference
            objDel();
            //Display();
            
            objDel += () => {
                Console.WriteLine("Anonymous Called");
            };
            objDel();
            
            
        }
        static void Main()
        {
            DelAdd objDelAdd = Add;
            Console.WriteLine(objDelAdd(10,5));

            objDelAdd += Substract;
            Console.WriteLine(objDelAdd(10,5));

        }
	
	static void Main(){
            
            Console.WriteLine(Convert.ToInt32(SpeedRegulator.High)+"\n");
            //Console.WriteLine("\n ");
            
            Console.WriteLine("\n" + Convert.ToInt32(Days.Monday)+"\n");
            Console.WriteLine(Convert.ToInt32(Days.Sunday));
        }
       
     
    }
}

--------------------------------------------------------------------------------------------------------------

Synchronus and ASynchronous

// Online C# Editor for free
// Write, Edit and Run your C# code using C# Online Compiler

using System;
using System.Threading;

public class HelloWorld
{
    public static void First(){
        for(int i=0;i<10;i++){
            Console.WriteLine("First");
            Thread.Sleep(1000);
            
        }
    }
    
    public static void Second(){
        for(int i=0;i<10;i++){
            Console.WriteLine("Second");
            Thread.Sleep(500);
            
        }
    }

	public static void RunTime(){
        for(int i=0;i<10000;i++){
            Console.WriteLine(i);
            //Thread.Sleep(500);
        }
    }
    
    public static async void Runsync(){
        await Task.Run(() => {
            Console.WriteLine("Hello Async");
        });
    }
    
    public static async Task<string> RunTaskWithReturn(string name){
        return await Task.Run(()=>
        {
            Console.WriteLine(name);
            return name;
        });
    }

	public static async void Runsync(){
        await Task.Run(() => {
           
        for(int i =0;i<100;i++){
            Console.WriteLine("Hello Async");}
        });
    }
    
    public static async Task<string> RunTaskWithReturn(string name){
        return await Task.Run(()=>
        {
            for(int i =0;i<10;i++){
            Console.WriteLine(name);}
            return name;
        });
    }

    public static void Main(string[] args)
    {
        Thread c1 = new Thread(First); 
       c1.Start();
       Thread c2 = new Thread(Second);
       c2.Start();
       //c1.Second();

	Runsync();
      Console.WriteLine("Sync");
      RunTaskWithReturn("Hello").Wait();
    }
}

-------------------------------------------------------------------------------------------------------------------------

Write async methods for CRUD operation

// Online C# Editor for free
// Write, Edit and Run your C# code using C# Online Compiler

using System;
using System.Collections.Generics;

﻿namespace LINQExamples
{
    public class Department
    {
        public int DeptNo { get; set; }
        public string DeptName { get; set; }
    }
    public class Employee
    {
        public int EmpNo { get; set; }
        public string Name { get; set; }
        public decimal Basic { get; set; }
        public int DeptNo { get; set; }
        public string Gender { get; set; }
        public override string ToString()
        {
            string s = Name + "," + EmpNo.ToString() + "," + Basic.ToString() + "," + DeptNo.ToString();
            return s;
        }
    }
    internal class Program
    {
        static List<Employee> lstEmp = new List<Employee>();
        static List<Department> lstDept = new List<Department>();

        public static void AddRecs()
        {
            lstDept.Add(new Department { DeptNo = 10, DeptName = "SALES" });
            lstDept.Add(new Department { DeptNo = 20, DeptName = "MKTG" });
            lstDept.Add(new Department { DeptNo = 30, DeptName = "IT" });
            lstDept.Add(new Department { DeptNo = 40, DeptName = "HR" });

            lstEmp.Add(new Employee { EmpNo = 1, Name = "Vikram", Basic = 10000, DeptNo = 10, Gender = "M" });
            lstEmp.Add(new Employee { EmpNo = 2, Name = "Vikas", Basic = 11000, DeptNo = 10, Gender = "M" });
            lstEmp.Add(new Employee { EmpNo = 3, Name = "Abhijit", Basic = 12000, DeptNo = 20, Gender = "M" });
            lstEmp.Add(new Employee { EmpNo = 4, Name = "Mona", Basic = 11000, DeptNo = 20, Gender = "F" });
            lstEmp.Add(new Employee { EmpNo = 5, Name = "Shweta", Basic = 12000, DeptNo = 20, Gender = "F" });
            lstEmp.Add(new Employee { EmpNo = 6, Name = "Sanjay", Basic = 11000, DeptNo = 30, Gender = "M" });
            lstEmp.Add(new Employee { EmpNo = 7, Name = "Arpan", Basic = 10000, DeptNo = 30, Gender = "M" });
            lstEmp.Add(new Employee { EmpNo = 8, Name = "Shraddha", Basic = 11000, DeptNo = 40, Gender = "F" });
        }
        
        public async List<Employee> findbyid(int id){
            
            foreach(var item in Employee){
                if(Employee.EmpNo == id){
                    return Employee;
                }
            }
        }
    
        
        
        
    public static void Main(string[] args)
    {
        Employee emp = new Employee();
        Console.WriteLine(emp.findbyid(1));
        Console.WriteLine ("Hello Mono World");
    }
}
}








